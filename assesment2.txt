
1.1 Function reduce() Program:

def myreduce(anyfunc, sequence):
  result = sequence[0]
  for item in sequence[1:]:
   result = anyfunc(result, item)
  return result
def sum(x,y): return x + y
print ("Sum of list [1,2,3] using reduce function "   + str(myreduce(sum, [1,2,3])) )

1.2 Fuction filter() Program:

def myfilter(anyfunc, sequence):
 result = []
 for item in sequence:
  if anyfunc(item):
   result.append(item)
 return result
def ispositive(x):
 if (x <= 0): 
  return False 
 else: 
  return True
print ("Choose positive Integers list [0,3,-2,8,4,-6,5] using filter function"  + str(myfilter(ispositive, [0,3,-2,8,4,-6,5])))

1.3. List Comprehension Program:

word = "ACADGILD"
alpha_list = [ alphabet for alphabet in word ]
print ("ACADGILD => " + str(alpha_list))

input_list = ['x','y','z']
result = [ item*num for item in input_list for num in range(1,5)  ]
print("['x','y','z'] => " +   str(result))

input_list = ['x','y','z']
result = [ item*num for num in range(1,5) for item in input_list  ]
print("['x','y','z'] => " +   str(result))

input_list = [2,3,4]
result = [ [item+num] for item in input_list for num in range(0,3)]
print("[2,3,4] =>" +  str(result))

input_list = [2,3,4,5]
result = [ [item+num for item in input_list] for num in range(0,4)  ]
print("[2,3,4,5] =>" +  str(result))

input_list=[1,2,3]
result = [ (b,a) for a in input_list for b in input_list]
print("[1,2,3] =>" +  str(result))

1.4 Longest Word Program:

list_words = ["Today","is","my","memorable","day"]
def longestWord(list_words):
 return reduce( (lambda x,y:y if len(y) > len(x) else x), list_words )
print ('Longest word in array ["Today","is","my","memorable","day"] => ' + longestWord(list_words) )

2.1 area of triangle
class tri:
    def side(self):
        self.a=float(input("enter length"))
        self.b=float(input("enter breath"))
        self.c=float(input("enter height"))
        self.s=self.a+self.b+self.c/2
class area(tri):
    def calc(self):
        self.Area = (self.s*(self.s-self.a)*(self.s-self.b)*(self.s-self.c)) ** 0.5
        print("area of a trinagle =",self.Area)
obj=area()
obj.side()
obj.calc()

2.2 Filter_long_words():
def filter_long_words(l,a):
    words=[]
    for j in l:
        if(len(j)>=a):
            words.append(j)
    return words
n=input("Enter words: ")
nt=n.split(",")
na=input("Enter Min Length: ")
long=filter_long_words(nt,int(na))
print("Words with at least min length: ",long)


2.3 Length of words in integer:
wordlist = ["I", "Like", "Rose", "Flower"]
def wordlength(wordlist):
 return list(map(lambda x: len(x), wordlist))
print ("word lengths in array => " + str(wordlength(wordlist)))


2.4 Vowels :
def is_vowel(char):
    if(char=='a' or char=='A' or char=='e' or char=='E'
       or char=='i' or char=='I' or char=='o' or char=='O'
       or char=='u' or char=='U'):
        print(char, "is a vowel")
    else:
        print(char, "is not a vowel")

char=input("Enter a character: ")
is_vowel(char)



